module Example.Hooks.UseEvent
  ( useEvent
  , subscribeTo
  , UseEvent
  , EventEqFn
  , EventProps
  , EventApi
  )
  where

import Prelude

import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Traversable (for_)
import Data.Tuple.Nested ((/\))
import Halogen.Hooks (HookM, Hooked, MemoValues, UseEffect, UseState, useState)
import Halogen.Hooks as Hooks

newtype UseEvent a hooks = UseEvent (UseState (Maybe a) hooks)

derive instance newtypeUseEvent :: Newtype (UseEvent a hooks) _

type EventEqFn a =
  { state :: Maybe a } -> { state :: Maybe a } -> Boolean

type EventProps slots output m a hooked =
  { capturesWith :: EventEqFn a -> (MemoValues -> hooked) -> hooked
  , subscribe :: (a -> HookM slots output m Unit) -> HookM slots output m Unit
  }

type EventApi slots output m a hooked =
  { push :: a -> HookM slots output m Unit
  , props :: EventProps slots output m a hooked
  }


-- | No, I do not know what the heck this type signature means.
-- | It was generated by the compiler and all attempts to clean it up
-- | and make it legible failed.
-- |
-- | Long story short, it allows you to push events inside a hook
-- | and enable some end-user to subscribe to those events when they occur:
-- | ```
-- | onSomeEvent <- useEvent
-- | -- somewhere in your HookM code
-- |   onSomeEvent.push "user clicked foo"
-- |
-- | Hooks.pure
-- |   { onSomeEvent: onSomeEvent.props }
-- |
-- | --------------
-- | -- in end-user code
-- |
-- | someLib <- useSomLibHook
-- | subscribeTo someLib.onSomeEvent (==) \string -> do
-- |   Hooks.put stateToken ("Event occurred: " <> string)
-- | ```
useEvent :: forall t2 t26 t27 t28 t3 t32 t39 t4 t40 t41 t45 t46 t5 t7.
  Newtype t5 (UseState (Maybe t46) t7) => Hooked t4 t3 t2 t7 t5
                                            { props :: { capturesWith :: ({ state :: Maybe t46
                                                                          }
                                                                          -> { state :: Maybe t46
                                                                             }
                                                                             -> Boolean
                                                                         )
                                                                         -> (MemoValues -> t32) -> t32
                                                       , subscribe :: (t46 -> HookM t41 t40 t39 t45) -> HookM t41 t40 t39 Unit
                                                       }
                                            , push :: t46 -> HookM t28 t27 t26 Unit
                                            }
useEvent = Hooks.wrap Hooks.do
  state /\ tState <- useState Nothing

  Hooks.pure { push: \value -> Hooks.put tState (Just value)
             , props: { capturesWith: \eqFn -> Hooks.capturesWith eqFn { state }
                      , subscribe: \cb -> do
                          state' <- Hooks.get tState
                          for_ state' cb
                      }
             }

-- | No, I do not know what the heck this type signature means.
-- | It was generated by the compiler and all attempts to clean it up
-- | and make it legible failed.
-- |
-- | Long story short, it cleans up what you would otherwise write.
-- | This...
-- | ```
-- | someLib <- useSomLibHook
-- | subscribeTo someLib.onSomeEvent (==) \string -> do
-- |   Hooks.put stateToken ("Event occurred: " <> string)
-- | ```
-- | ... instead of this ...
-- | ```
-- | someLib <- useSomLibHook
-- | someLib.onSomeEvent.capturesWith (==) Hooks.useTickEffect do
-- |   someLib.onSomeEvent.subscribe \string -> do
-- |      Hooks.put stateToken ("Event occurred: " <> string)
-- |   pure Nothing
-- | ```
subscribeTo :: forall t48 t49 t53 t54 t55 t57 t59 t62 t66 t67.
  Discard t57 => Bind t59 => Applicative t59 => { capturesWith :: t48 -> (MemoValues -> HookM t55 t54 t53 (Maybe (HookM t55 t54 t53 Unit)) -> (forall hooks. Hooked t55 t54 t53 hooks (UseEffect hooks) Unit)) -> t59 (Maybe t66) -> t67
                                                , subscribe :: t49 -> t59 t57
                                                | t62
                                                }
                                                -> t48 -> t49 -> t67
subscribeTo props eqFn cb =
  props.capturesWith eqFn Hooks.useTickEffect do
    props.subscribe cb
    pure Nothing
